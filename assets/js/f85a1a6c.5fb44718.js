"use strict";(self.webpackChunkcreate_project_docs=self.webpackChunkcreate_project_docs||[]).push([[1270],{3905:(e,t,a)=>{a.d(t,{Zo:()=>p,kt:()=>f});var l=a(7294);function s(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);t&&(l=l.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,l)}return a}function r(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){s(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function n(e,t){if(null==e)return{};var a,l,s=function(e,t){if(null==e)return{};var a,l,s={},i=Object.keys(e);for(l=0;l<i.length;l++)a=i[l],t.indexOf(a)>=0||(s[a]=e[a]);return s}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(l=0;l<i.length;l++)a=i[l],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(s[a]=e[a])}return s}var u=l.createContext({}),o=function(e){var t=l.useContext(u),a=t;return e&&(a="function"==typeof e?e(t):r(r({},t),e)),a},p=function(e){var t=o(e.components);return l.createElement(u.Provider,{value:t},e.children)},d="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return l.createElement(l.Fragment,{},t)}},m=l.forwardRef((function(e,t){var a=e.components,s=e.mdxType,i=e.originalType,u=e.parentName,p=n(e,["components","mdxType","originalType","parentName"]),d=o(a),m=s,f=d["".concat(u,".").concat(m)]||d[m]||c[m]||i;return a?l.createElement(f,r(r({ref:t},p),{},{components:a})):l.createElement(f,r({ref:t},p))}));function f(e,t){var a=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var i=a.length,r=new Array(i);r[0]=m;var n={};for(var u in t)hasOwnProperty.call(t,u)&&(n[u]=t[u]);n.originalType=e,n[d]="string"==typeof e?e:s,r[1]=n;for(var o=2;o<i;o++)r[o]=a[o];return l.createElement.apply(null,r)}return l.createElement.apply(null,a)}m.displayName="MDXCreateElement"},770:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>u,contentTitle:()=>r,default:()=>d,frontMatter:()=>i,metadata:()=>n,toc:()=>o});var l=a(7462),s=(a(7294),a(3905));const i={sidebar_position:1},r="Unit Test",n={unversionedId:"testing/unit-testing",id:"testing/unit-testing",title:"Unit Test",description:"User Class",source:"@site/docs/testing/unit-testing.md",sourceDirName:"testing",slug:"/testing/unit-testing",permalink:"/project-studysync/docs/testing/unit-testing",draft:!1,editUrl:"https://github.com/Capstone-Projects-2023-Fall/project-studysync/edit/main/documentation/docs/testing/unit-testing.md",tags:[],version:"current",lastUpdatedBy:"mingjiew522",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"docsSidebar",previous:{title:"Test Procedures",permalink:"/project-studysync/docs/category/test-procedures"},next:{title:"Integration Test",permalink:"/project-studysync/docs/testing/integration-testing"}},u={},o=[{value:"User Class",id:"user-class",level:2},{value:"UserProfile Class",id:"userprofile-class",level:2},{value:"Notification Class",id:"notification-class",level:2},{value:"Flashcard Class",id:"flashcard-class",level:2},{value:"StudyTool Class",id:"studytool-class",level:2},{value:"Quiz Class",id:"quiz-class",level:2},{value:"Social Class",id:"social-class",level:2},{value:"Event Class",id:"event-class",level:2},{value:"Leaderboard Class",id:"leaderboard-class",level:2},{value:"SchedulingSystem Class",id:"schedulingsystem-class",level:2},{value:"Dashboard Class",id:"dashboard-class",level:2},{value:"AiTutor Class",id:"aitutor-class",level:2},{value:"Score Class",id:"score-class",level:2},{value:"Question Class",id:"question-class",level:2}],p={toc:o};function d(e){let{components:t,...a}=e;return(0,s.kt)("wrapper",(0,l.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"unit-test"},"Unit Test"),(0,s.kt)("h2",{id:"user-class"},"User Class"),(0,s.kt)("ol",null,(0,s.kt)("li",{parentName:"ol"},(0,s.kt)("p",{parentName:"li"},"Method: login()"),(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},"Test Case: Verify if a user can log in with valid credentials. "),(0,s.kt)("li",{parentName:"ul"},"Input: Valid email and password. "),(0,s.kt)("li",{parentName:"ul"},"Expected Result: User logged in successfully. "))),(0,s.kt)("li",{parentName:"ol"},(0,s.kt)("p",{parentName:"li"},"Method: logout() "),(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},"Test Case: Verify if a user can log out. "),(0,s.kt)("li",{parentName:"ul"},"Input: None. "),(0,s.kt)("li",{parentName:"ul"},"Expected Result: User logged out successfully. "))),(0,s.kt)("li",{parentName:"ol"},(0,s.kt)("p",{parentName:"li"},"Method: register() "),(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},"Test Case: Verify if a user can register. "),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("pre",{parentName:"li"},(0,s.kt)("code",{parentName:"pre"},"Input: Valid user email and password. \n"))),(0,s.kt)("li",{parentName:"ul"},"Expected Result: User successfully registered."))),(0,s.kt)("li",{parentName:"ol"},(0,s.kt)("p",{parentName:"li"},"Method: createFlashcard() "),(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},"Test Case: Verify if a user can create a flashcard. "),(0,s.kt)("li",{parentName:"ul"},"Input: Term and definition. "),(0,s.kt)("li",{parentName:"ul"},"Expected Result: Flashcard successfully created. "))),(0,s.kt)("li",{parentName:"ol"},(0,s.kt)("p",{parentName:"li"},"Method: viewFriendProfile() "),(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},"Test Case: Verify if a user can view a friend's profile. "),(0,s.kt)("li",{parentName:"ul"},"Input: User ID of the friend. "),(0,s.kt)("li",{parentName:"ul"},"Expected Result: Friend's profile details successfully displayed. "))),(0,s.kt)("li",{parentName:"ol"},(0,s.kt)("p",{parentName:"li"},"Method: addFriend() "),(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},"Test Case: Verify if a user can add another user as a friend. "),(0,s.kt)("li",{parentName:"ul"},"Input: User ID of the potential friend. "),(0,s.kt)("li",{parentName:"ul"},"Expected Result: User successfully added as a friend. "))),(0,s.kt)("li",{parentName:"ol"},(0,s.kt)("p",{parentName:"li"},"Method: removeFriend() "),(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},"Test Case: Verify if a user can remove another user from their friend list. "),(0,s.kt)("li",{parentName:"ul"},"Input: User ID of the friend to be removed. "),(0,s.kt)("li",{parentName:"ul"},"Expected Result: User successfully removed from the friend list."))),(0,s.kt)("li",{parentName:"ol"},(0,s.kt)("p",{parentName:"li"},"Method: followFriend () "),(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},"Test Case: Verify if a user can follow a friend. "),(0,s.kt)("li",{parentName:"ul"},"Input: User ID of the friend to be followed. "),(0,s.kt)("li",{parentName:"ul"},"Expected Result: Friend successfully followed."))),(0,s.kt)("li",{parentName:"ol"},(0,s.kt)("p",{parentName:"li"},"Method: unfollowFriend() "),(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},"Test Case: Verify if a user can unfollow a friend. "),(0,s.kt)("li",{parentName:"ul"},"Input: User ID of the friend to be unfollowed. "),(0,s.kt)("li",{parentName:"ul"},"Expected Result: Friend successfully unfollowed. ")))),(0,s.kt)("h2",{id:"userprofile-class"},"UserProfile Class"),(0,s.kt)("ol",null,(0,s.kt)("li",{parentName:"ol"},"Method: updateProfile() ",(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},"Test Case: Verify if a user's profile can be updated. "),(0,s.kt)("li",{parentName:"ul"},"Input: New profile data. "),(0,s.kt)("li",{parentName:"ul"},"Expected Result: UserProfile updated with new data. ")))),(0,s.kt)("h2",{id:"notification-class"},"Notification Class"),(0,s.kt)("ol",null,(0,s.kt)("li",{parentName:"ol"},"Method: display() ",(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},"Test Case: Verify if a notification is displayed. "),(0,s.kt)("li",{parentName:"ul"},"Input: Notification message and type. "),(0,s.kt)("li",{parentName:"ul"},"Expected Result: Notification displayed as per given type and message. ")))),(0,s.kt)("h2",{id:"flashcard-class"},"Flashcard Class"),(0,s.kt)("ol",null,(0,s.kt)("li",{parentName:"ol"},"Method: view() ",(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},"Test Case: Verify if the flashcard can be displayed "),(0,s.kt)("li",{parentName:"ul"},"Input: Show flashcards. "),(0,s.kt)("li",{parentName:"ul"},"Expected Result: Display flashcard successfully."))),(0,s.kt)("li",{parentName:"ol"},"Method: edit() ",(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},"Test Case: Verify if the term definition of a flashcard can be edited. "),(0,s.kt)("li",{parentName:"ul"},"Input: New term string. "),(0,s.kt)("li",{parentName:"ul"},"Expected Result: Flashcard's term , definition updated successfully. "))),(0,s.kt)("li",{parentName:"ol"},"Method: shareWithFriend() ",(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},"Test Case: Verify if a flashcard can be shared with a friend. "),(0,s.kt)("li",{parentName:"ul"},"Input: Friend's User ID. "),(0,s.kt)("li",{parentName:"ul"},"Expected Result: Flashcard shared successfully with the specified friend. ")))),(0,s.kt)("h2",{id:"studytool-class"},"StudyTool Class"),(0,s.kt)("ol",null,(0,s.kt)("li",{parentName:"ol"},"Method: createFlashcards() ",(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},"Test Case: Verify if flashcards can be created. "),(0,s.kt)("li",{parentName:"ul"},"Input: List of Flashcard objects with terms and definitions. "),(0,s.kt)("li",{parentName:"ul"},"Expected Result: Flashcards successfully created in the system. "))),(0,s.kt)("li",{parentName:"ol"},"Method: createQuizQuestions() ",(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},"Test Case: Verify if quiz questions can be created. "),(0,s.kt)("li",{parentName:"ul"},"Input: List of QuizQuestion objects. "),(0,s.kt)("li",{parentName:"ul"},"Expected Result: Quiz questions successfully created in the system. "))),(0,s.kt)("li",{parentName:"ol"},"Method: scheduleStudySession() ",(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},"Test Case: Verify if a study session can be scheduled. "),(0,s.kt)("li",{parentName:"ul"},"Input: Date, start time, end time. "),(0,s.kt)("li",{parentName:"ul"},"Expected Result: Study session successfully scheduled on the specified date and time. ")))),(0,s.kt)("h2",{id:"quiz-class"},"Quiz Class"),(0,s.kt)("ol",null,(0,s.kt)("li",{parentName:"ol"},"Method: takeQuiz() ",(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},"Test Case: Verify if a user can take a quiz. "),(0,s.kt)("li",{parentName:"ul"},"Input: List of questions and user responses. "),(0,s.kt)("li",{parentName:"ul"},"Expected Result: Quiz taken successfully and results displayed. "))),(0,s.kt)("li",{parentName:"ol"},"Method: edit() ",(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},"Test Case: Verify if questions in the quiz can be edited. "),(0,s.kt)("li",{parentName:"ul"},"Input: List of edited QuizQuestion objects. "),(0,s.kt)("li",{parentName:"ul"},"Expected Result: Questions in the quiz are successfully updated. "))),(0,s.kt)("li",{parentName:"ol"},"Method: viewResults() ",(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},"Test Case: Verify if all score can be viewed. "),(0,s.kt)("li",{parentName:"ul"},"Input: score. "),(0,s.kt)("li",{parentName:"ul"},"Expected Result: Display the score. "))),(0,s.kt)("li",{parentName:"ol"},"Method: shareWithFriend() ",(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},"Test Case: Verify if a user can view a friend's score on the quiz. "),(0,s.kt)("li",{parentName:"ul"},"Input: User object representing the friend. "),(0,s.kt)("li",{parentName:"ul"},"Expected Result: Display the score of the specified friend on the quiz. ")))),(0,s.kt)("h2",{id:"social-class"},"Social Class"),(0,s.kt)("ol",null,(0,s.kt)("li",{parentName:"ol"},"Method: view()",(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},"Test Case: Verify if the user can view their social dashboard."),(0,s.kt)("li",{parentName:"ul"},"Input: None."),(0,s.kt)("li",{parentName:"ul"},"Expected Result: Display of the user's social dashboard with friends, leaderboard, and other relevant details."))),(0,s.kt)("li",{parentName:"ol"},"Method: chat()",(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},"Test Case: Verify if the user can initiate or continue a chat with a friend."),(0,s.kt)("li",{parentName:"ul"},"Input: User ID or friend's name."),(0,s.kt)("li",{parentName:"ul"},"Expected Result: Chat window opens with the selected friend, and messages can be sent and received.")))),(0,s.kt)("h2",{id:"event-class"},"Event Class"),(0,s.kt)("ol",null,(0,s.kt)("li",{parentName:"ol"},"Method: editEvent()",(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},"Test Case: Verify if details of an event can be edited."),(0,s.kt)("li",{parentName:"ul"},"Input: Event ID, updated title or date."),(0,s.kt)("li",{parentName:"ul"},"Expected Result: Event details successfully updated in the system.")))),(0,s.kt)("h2",{id:"leaderboard-class"},"Leaderboard Class"),(0,s.kt)("ol",null,(0,s.kt)("li",{parentName:"ol"},"Method: update()",(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},"Test Case: Verify if the leaderboard can be updated with new scores."),(0,s.kt)("li",{parentName:"ul"},"Input: List of scores or individual score entry."),(0,s.kt)("li",{parentName:"ul"},"Expected Result: Leaderboard successfully updated with the new scores in the correct order.")))),(0,s.kt)("h2",{id:"schedulingsystem-class"},"SchedulingSystem Class"),(0,s.kt)("ol",null,(0,s.kt)("li",{parentName:"ol"},"Method: scheduleEvent()",(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},"Test Case: Verify if an event can be scheduled using the scheduling system."),(0,s.kt)("li",{parentName:"ul"},"Input: User ID, date, title of the event."),(0,s.kt)("li",{parentName:"ul"},"Expected Result: Event successfully scheduled for the user on the given date with the specified title."))),(0,s.kt)("li",{parentName:"ol"},"Method: removeEvent()",(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},"Test Case: Verify if an event can be removed from the scheduling system."),(0,s.kt)("li",{parentName:"ul"},"Input: User ID, event ID or event title."),(0,s.kt)("li",{parentName:"ul"},"Expected Result: Event successfully removed from the user's schedule."))),(0,s.kt)("li",{parentName:"ol"},"Method: moveEvent()",(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},"Test Case: Verify if an event can be moved to a different date or time."),(0,s.kt)("li",{parentName:"ul"},"Input: User ID, event ID, new date and/or time."),(0,s.kt)("li",{parentName:"ul"},"Expected Result: Event's date and/or time successfully updated in the system."))),(0,s.kt)("li",{parentName:"ol"},"Method: remindUser()",(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},"Test Case: Verify if the scheduling system can send a reminder for an event to the user."),(0,s.kt)("li",{parentName:"ul"},"Input: User ID, event ID."),(0,s.kt)("li",{parentName:"ul"},"Expected Result: User receives a reminder notification for the specified event from the scheduling system.")))),(0,s.kt)("h2",{id:"dashboard-class"},"Dashboard Class"),(0,s.kt)("ol",null,(0,s.kt)("li",{parentName:"ol"},"Method: viewUpcomingEvent()",(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},"Test Case: Verify if a specific upcoming event can be viewed by its ID."),(0,s.kt)("li",{parentName:"ul"},"Input: Event ID."),(0,s.kt)("li",{parentName:"ul"},"Expected Result: Display the details of the specified event."))),(0,s.kt)("li",{parentName:"ol"},"Method: takeQuiz()",(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},"Test Case: Verify if the user can take a quiz from the dashboard."),(0,s.kt)("li",{parentName:"ul"},"Input: Quiz ID."),(0,s.kt)("li",{parentName:"ul"},"Expected Result: Start the specified quiz and allow the user to answer the questions."))),(0,s.kt)("li",{parentName:"ol"},"Method: studyFlashcards()",(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},"Test Case: Verify if the user can study flashcards from the dashboard."),(0,s.kt)("li",{parentName:"ul"},"Input: Set of flashcards or flashcard ID."),(0,s.kt)("li",{parentName:"ul"},"Expected Result: Display the selected set of flashcards for the user to study.")))),(0,s.kt)("h2",{id:"aitutor-class"},"AiTutor Class"),(0,s.kt)("ol",null,(0,s.kt)("li",{parentName:"ol"},"Method: askAQuestion()",(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},"Test Case: Verify if the user can ask a question to the AiTutor."),(0,s.kt)("li",{parentName:"ul"},"Input: A string containing the user's question."),(0,s.kt)("li",{parentName:"ul"},"Expected Result: The AiTutor provides an appropriate response or answer to the question.")))),(0,s.kt)("h2",{id:"score-class"},"Score Class"),(0,s.kt)("ol",null,(0,s.kt)("li",{parentName:"ol"},"Method: calculatePercentage()",(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},"Test Case: Calculate percentage."),(0,s.kt)("li",{parentName:"ul"},"Input: User ID."),(0,s.kt)("li",{parentName:"ul"},"Expected Result: Return the percentage right")))),(0,s.kt)("h2",{id:"question-class"},"Question Class"),(0,s.kt)("ol",null,(0,s.kt)("li",{parentName:"ol"},"Method: view()",(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},"Test Case: Verify if a specific question can be viewed."),(0,s.kt)("li",{parentName:"ul"},"Input: Question ID."),(0,s.kt)("li",{parentName:"ul"},"Expected Result: Display the details of the specified question."))),(0,s.kt)("li",{parentName:"ol"},"Method: checkAnswerChoice()",(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},"Test Case: Verify if a user's answer choice for a question can be checked for correctness."),(0,s.kt)("li",{parentName:"ul"},"Input: Question ID, User's Answer Choice."),(0,s.kt)("li",{parentName:"ul"},"Expected Result: Return whether the user's answer choice is correct or not.")))))}d.isMDXComponent=!0}}]);