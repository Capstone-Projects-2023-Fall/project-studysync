"use strict";(self.webpackChunkcreate_project_docs=self.webpackChunkcreate_project_docs||[]).push([[1270],{3905:(e,t,a)=>{a.d(t,{Zo:()=>d,kt:()=>c});var l=a(7294);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);t&&(l=l.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,l)}return a}function n(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,l,i=function(e,t){if(null==e)return{};var a,l,i={},r=Object.keys(e);for(l=0;l<r.length;l++)a=r[l],t.indexOf(a)>=0||(i[a]=e[a]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(l=0;l<r.length;l++)a=r[l],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var p=l.createContext({}),o=function(e){var t=l.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):n(n({},t),e)),a},d=function(e){var t=o(e.components);return l.createElement(p.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return l.createElement(l.Fragment,{},t)}},k=l.forwardRef((function(e,t){var a=e.components,i=e.mdxType,r=e.originalType,p=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),u=o(a),k=i,c=u["".concat(p,".").concat(k)]||u[k]||m[k]||r;return a?l.createElement(c,n(n({ref:t},d),{},{components:a})):l.createElement(c,n({ref:t},d))}));function c(e,t){var a=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=a.length,n=new Array(r);n[0]=k;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s[u]="string"==typeof e?e:i,n[1]=s;for(var o=2;o<r;o++)n[o]=a[o];return l.createElement.apply(null,n)}return l.createElement.apply(null,a)}k.displayName="MDXCreateElement"},770:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>p,contentTitle:()=>n,default:()=>u,frontMatter:()=>r,metadata:()=>s,toc:()=>o});var l=a(7462),i=(a(7294),a(3905));const r={sidebar_position:1},n="Unit Test",s={unversionedId:"testing/unit-testing",id:"testing/unit-testing",title:"Unit Test",description:"FlashcardCom Test Suite",source:"@site/docs/testing/unit-testing.md",sourceDirName:"testing",slug:"/testing/unit-testing",permalink:"/project-studysync/docs/testing/unit-testing",draft:!1,editUrl:"https://github.com/Capstone-Projects-2023-Fall/project-studysync/edit/main/documentation/docs/testing/unit-testing.md",tags:[],version:"current",lastUpdatedBy:"Shen Liu",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"docsSidebar",previous:{title:"Test Procedures",permalink:"/project-studysync/docs/category/test-procedures"},next:{title:"Integration Test",permalink:"/project-studysync/docs/testing/integration-testing"}},p={},o=[{value:"FlashcardCom Test Suite",id:"flashcardcom-test-suite",level:2},{value:"FlashcardShare Component Test Suite",id:"flashcardshare-component-test-suite",level:2},{value:"FlashcardUICom Component Test Suite",id:"flashcarduicom-component-test-suite",level:2},{value:"Quiz List Component Test Suite",id:"quiz-list-component-test-suite",level:2},{value:"Quiz Component Test Suite",id:"quiz-component-test-suite",level:2},{value:"MainQuizPage Component Test Suite",id:"mainquizpage-component-test-suite",level:2},{value:"Leaderboard Component Test Suite",id:"leaderboard-component-test-suite",level:2},{value:"Event Repository Test Suite",id:"event-repository-test-suite",level:2},{value:"Notification Repository Test Suite",id:"notification-repository-test-suite",level:2},{value:"QuizRepository Test Suite",id:"quizrepository-test-suite",level:2},{value:"Flashcard Repository Test Suite",id:"flashcard-repository-test-suite",level:2},{value:"UserRepository Test Suite",id:"userrepository-test-suite",level:2}],d={toc:o};function u(e){let{components:t,...a}=e;return(0,i.kt)("wrapper",(0,l.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"unit-test"},"Unit Test"),(0,i.kt)("h2",{id:"flashcardcom-test-suite"},"FlashcardCom Test Suite"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Rendering and UI Elements "),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Test Case: Verify that the FlashcardComponent renders correctly and displays the initial UI elements. ")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Method: render() ")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Expected Result: The text 'Add Subject' should be present in the document. "))))),(0,i.kt)("ol",{start:2},(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Fetching Subjects and Flashcards on Load "),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Test Case: Ensure that subjects and flashcards are fetched from the repository when the component loads. ")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Method: getUserSubjects(), getUserFlashcardSets(), getFlashcardSetById() ")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Expected Result: The fetched subjects and flashcards should be correctly displayed on the screen. "))))),(0,i.kt)("ol",{start:3},(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Adding a New Subject "),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Test Case: Confirm that a new subject can be added. ")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Method: addUserSubject() ")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Expected Result: The addUserSubject method should be called with the correct parameters. "))))),(0,i.kt)("ol",{start:4},(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Creating a New Flashcard Set "),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Test Case: Validate that a new flashcard set can be created. ")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Method: createFlashcardSet() ")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Expected Result: The createFlashcardSet method should be invoked with the specified topic details. "))))),(0,i.kt)("ol",{start:5},(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Handling Topic Deletion "),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Test Case: Test the functionality of topic deletion. ")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Method: removeSetIdFromUser() ")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Expected Result: The removeSetIdFromUser method should be called with the correct user ID and set ID. "))))),(0,i.kt)("ol",{start:6},(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Handling Topic Editing "),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Test Case: Ensure that topics can be edited correctly. ")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Method: updateFlashcardSetName() ")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Expected Result: The updateFlashcardSetName method should be called with the correct set ID and new topic name. "))))),(0,i.kt)("h2",{id:"flashcardshare-component-test-suite"},"FlashcardShare Component Test Suite"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Rendering and UI Elements "),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Test Case: Verify that the FlashcardShare component renders correctly. ")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Method: render() ")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Expected Result: Initial UI elements of the FlashcardShare component should be displayed. "))))),(0,i.kt)("ol",{start:2},(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Fetching Flashcards on Load "),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Test Case: Confirm that flashcards are fetched from the repository upon component load. ")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Method: getFlashcardItems() ")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Expected Result: The fetched flashcards should be correctly displayed. "))))),(0,i.kt)("h2",{id:"flashcarduicom-component-test-suite"},"FlashcardUICom Component Test Suite"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Rendering and Initial Display "),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Test Case: Validate that the FlashcardApp component renders and shows initial UI elements. ")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Method: render() ")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Expected Result: Initial UI elements of the FlashcardApp component should be visible. "))))),(0,i.kt)("ol",{start:2},(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Loading Flashcards, Comments, and User Image."),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Test Case: Ensure that flashcards, comments, and user image are loaded on initialization. ")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Method: getFlashcardItems(), getCommentsWithUserData(), getUserImageURLByUid() ")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Expected Result: Flashcards, comments, and user image should be correctly fetched and displayed. "))))),(0,i.kt)("ol",{start:3},(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Adding a Flashcard "),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Test Case: Test the addition of a new flashcard. ")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Method: addFlashcardItem() ")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Expected Result: The addFlashcardItem method should be called with the correct set ID, term, and definition. "))))),(0,i.kt)("ol",{start:4},(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Deleting a Flashcard "),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Test Case: Validate the deletion of a flashcard. ")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Method: deleteFlashcard() ")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Expected Result: The deleteFlashcard method should be invoked with the appropriate set ID and flashcard ID. "))))),(0,i.kt)("ol",{start:5},(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Updating a Flashcard "),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Test Case: Confirm that a flashcard can be updated. ")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Method: updateFlashcard() ")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Expected Result: The updateFlashcard method should be called with the correct parameters. "))))),(0,i.kt)("ol",{start:6},(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Sending a Comment "),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Test Case: Test the functionality of sending a comment. ")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Method: addComment() ")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Expected Result: The addComment method should be invoked with the correct set ID and comment details. "))))),(0,i.kt)("ol",{start:7},(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Generating Flashcards with AI "),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Test Case: Validate the AI-based generation of flashcards. ")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Method: callYourCloudFunctionToGenerateFlashcards() ")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Expected Result: The callYourCloudFunctionToGenerateFlashcards method should be called with the specified parameters, and the generated flashcards should match the expected output. "))))),(0,i.kt)("ol",{start:8},(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Loading and Displaying Flashcards "),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Test Case: Ensure that flashcards are loaded and displayed correctly. ")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Method: getFlashcardItems() ")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Expected Result: The flashcards should be correctly fetched and displayed as per the data provided. "))),(0,i.kt)("img",{alt:"image",src:"https://github.com/Capstone-Projects-2023-Fall/project-studysync/assets/123430237/1c04eadc-3027-4cac-84f8-4be87b9e23ac"}))),(0,i.kt)("h2",{id:"quiz-list-component-test-suite"},"Quiz List Component Test Suite"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Updates the Quiz Title"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},'Test Case: "Updates the Quiz Title" ')),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Method:  "),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Renders an EditQuizDialog component with predefined props. ")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Verifies the correct rendering of the component title, text field, and buttons. ")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},'Simulates a user changing the text field and clicking the "Save" button. ')),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Checks if the onEditQuizTitle and handleClose functions are called with the expected arguments. ")))))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Fetches and Displays Quiz Titles"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},'Test Case: "Fetches and Displays Quiz Titles" ')),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Method: "),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Mocks the FlashcardRepo.getQuizTitleFromFlashcardSet function to resolve with predefined quiz data. ")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Renders the QuizList component and waits for asynchronous operations to complete. ")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Asserts that the component renders the fetched quiz titles by checking each title against the container. "))))))),(0,i.kt)("h2",{id:"quiz-component-test-suite"},"Quiz Component Test Suite"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Does Not Add a Question When Input is Invalid"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},'Test Case: "Does Not Add a Question When Input is Invalid" ')),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Method: "),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Mocks the FlashcardRepo.addQuizQuestion to reject with an error. ")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},'Renders the FetchQuestions component and triggers a click on the "Add Question" button. ')),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Expects that addQuizQuestion is not called. ")))))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Confirms Question Deletion"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},'Test Case: "Confirms Question Deletion" ')),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Method: "),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Sets up mock quiz and question IDs. ")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Calls FlashcardRepo.deleteQuestion and expects it to be called with the correct arguments. ")))))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Adds Owned Quiz to the User"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},'Test Case: "Adds Owned Quiz to the User" ')),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Method: "),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Mocks necessary functions and renders the CreateQuiz component. ")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},'Triggers a click on the "Create Quiz" button and waits for asynchronous operations to complete. ')),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Expects that createNewQuiz and addOwnedQuizSetToUser functions are called with the correct arguments. ")))))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Handles Opening and Fetches Flashcard Set Name"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},'Test Case: "Handles Opening and Fetches Flashcard Set Name" ')),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Method:  "),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Sets up mocks for necessary functions. ")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Calls flashcardSetHandler.handleOpenGenerateAI and expects mocked functions to be called with the correct arguments. ")))))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Generates Questions by Using AI Generating"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},'Test Case: "Generates Questions by Using AI Generating" ')),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Method:  "),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Sets up mock data and mocks the function for generating flashcards using AI. ")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Calls the function and expects it to be called with the correct arguments and returns the mock data. ")))))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Retrieves the Quiz Title Using Quiz ID"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},'Test Case: "Retrieves the Quiz Title Using Quiz ID" ')),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Method:  "),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Calls FlashcardRepo.getQuizTitleFromFlashcardSet with a quiz ID and expects it to be called with the correct argument. "))))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Retrieves the Quiz ID from a Flashcard Set"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},'Test Case: "Retrieves the Quiz ID from a Flashcard Set" ')),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Method:  "),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Calls FlashcardRepo.getQuizTitleId with quiz name and set ID and expects it to be called with the correct arguments. "))))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Retrieves the Quiz ID from a Topic Name"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},'Test Case: "Retrieves the Quiz ID from a Topic Name" ')),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Method:  "),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Calls FlashcardRepo.getQuizIdByTopicName with a quiz name and expects it to be called with the correct argument. "))))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Creates New Quiz for a Flashcard Set"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},'Test Case: "Creates New Quiz for a Flashcard Set" ')),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Method:  "),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Calls FlashcardRepo.createNewQuiz with a new quiz object and expects it to be called with the correct argument. "))))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Gets Flashcard Items by Status"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},'Test Case: "Gets Flashcard Items by Status" ')),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Method: "),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Calls FlashcardRepo.getFlashcardItemsByStatus with a status object and expects it to be called with the correct argument. "))))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Updates User Score and Adds Attempt"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},'Test Case: "Updates User Score and Adds Attempt" ')),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Method:  "),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"  - Calls FlashcardRepo.updateScoreAndAddAttempt with a score object and expects it to be called with the correct argument. \n")),(0,i.kt)("img",{alt:"image",src:"https://github.com/Capstone-Projects-2023-Fall/project-studysync/assets/123430237/c1d55bc2-6687-4aa1-9b4a-1ea5d2d93bd3"}))))),(0,i.kt)("h2",{id:"mainquizpage-component-test-suite"},"MainQuizPage Component Test Suite"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Checking Answers "),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Test Case: Verify that the checkAnswer method updates the state with the selected answer. ")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Method: checkAnswer(index) ")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Expected Result: The state of the questions should reflect the selected answer. If the selected answer is correct, the corresponding question's userAnswer should match the correctChoice. "))))),(0,i.kt)("ol",{start:2},(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Calculating Score "),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Test Case: Ensure that the calculateScore method correctly calculates the score after all questions have been answered. ")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Method: calculateScore() ")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Expected Result: The calculated score percentage should be displayed based on the number of correct answers. "))))),(0,i.kt)("ol",{start:3},(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Calculating Initial Time "),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Test Case: Confirm that the calculateInitialTime method computes the initial time correctly when the component mounts based on the number of questions. ")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Method: calculateInitialTime() ")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Expected Result: The initial time displayed should be the total number of questions multiplied by the allotted time per question (in seconds). "))))),(0,i.kt)("img",{alt:"image",src:"https://github.com/Capstone-Projects-2023-Fall/project-studysync/assets/123430237/05c928a2-e9bc-4dfa-a09b-4b11a6d89dd4"}),(0,i.kt)("h2",{id:"leaderboard-component-test-suite"},"Leaderboard Component Test Suite"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Fetching Users and Scores "),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Test Case: Confirm that the fetchUsersAndScores method retrieves the list of users and their scores when the component loads. ")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Method: fetchUsersAndScores() ")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Expected Result: Upon component load, the leaderboard should be populated with user data, reflecting their scores and rankings. "))))),(0,i.kt)("ol",{start:2},(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Leaderboard Rendering "),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Test Case: Verify that the renderLeaderboard method displays the leaderboard with users ranked according to their scores. ")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Method: renderLeaderboard(data, title, key, rankKey) ")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Expected Result: Users should be listed in the order of their ranks based on scores, with UI elements showing their names and scores. "))))),(0,i.kt)("ol",{start:3},(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Search Handling "),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"- Test Case: Ensure that the handleSearch method filters the leaderboard results according to the search query. \n\n- Method: handleSearch(event) \n\n- Expected Result: As a user types into the search field, the leaderboard should update in real-time to only display users whose names match the search query. \n")),(0,i.kt)("img",{alt:"image",src:"https://github.com/Capstone-Projects-2023-Fall/project-studysync/assets/123430237/6a5067d5-2f0a-478f-9f7c-6e365ba99434"}))),(0,i.kt)("h2",{id:"event-repository-test-suite"},"Event Repository Test Suite"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"CreateEvent"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Test Case: Test creating an event.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Method: CreateEvent()")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Expected Result: The event should be successfully created in the repository.")))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"CreateNewFollowerEvent"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Test Case: Test creating a new follower event.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Method: CreateNewFollowerEvent()")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Expected Result: The new follower event should be successfully created in the repository.")))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"CreateShareQuizEvent"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Test Case: Test creating a share quiz event.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Method: CreateShareQuizEvent()")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Expected Result: The share quiz event should be successfully created in the repository.")))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"CreateShareFlashCardEvent"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Test Case: Test creating a share flashcard event.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Method: CreateShareFlashCardEvent()")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Expected Result: The share flashcard event should be successfully created in the repository.")))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"CreateUpcomingEvent"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Test Case: Test creating an upcoming event.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Method: CreateUpcomingEvent()")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Expected Result: The upcoming event should be successfully created in the repository.")))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"GetEvent"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Test Case: Test getting an event by id.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Method: GetEvent(eventId)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Expected Result: The event with the specified eventId should be retrieved from the repository.")))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"GetPastEvent"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Test Case: Test getting an event that is in the past.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Method: GetPastEvent()")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Expected Result: A past event should be retrieved from the repository.")))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"GetUpcomingEvent"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Test Case: Test getting an upcoming event.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Method: GetUpcomingEvent()")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Expected Result: An upcoming event should be retrieved from the repository.")))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"UpdateUpcomingEvent"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Test Case: Test updating an upcoming event.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Method: UpdateUpcomingEvent(eventId, updatedEvent)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Expected Result: The upcoming event with the specified eventId should be successfully updated in the repository.")))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"MarkAsNotified"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"- Test Case: Test marking a past event as notified.\n\n- Method: MarkAsNotified(eventId)\n\n- Expected Result: The specified past event should be marked as notified in the repository.\n")),(0,i.kt)("img",{alt:"image",src:"https://github.com/Capstone-Projects-2023-Fall/project-studysync/assets/123430237/7d8b1e4d-2c0d-4aac-8e1c-6a39a75345f1"}))),(0,i.kt)("h2",{id:"notification-repository-test-suite"},"Notification Repository Test Suite"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"getNotificationById"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Test Case: Test getting notification by id.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Method: getNotificationById(notificationId)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Expected Result: The notification with the specified notificationId should be retrieved from the repository.")))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"addNotification"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Test Case: Test adding a notification.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Method: addNotification(notification)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Expected Result: The notification should be successfully added to the repository.")))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"getListOfNotifications"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Test Case: Test getting a list of notifications.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Method: getListOfNotifications()")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Expected Result: A list of notifications should be retrieved from the repository.")))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"UpdateNotification"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Test Case: Test updating a notification.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Method: UpdateNotification(notificationId, updatedNotification)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Expected Result: The notification with the specified notificationId should be successfully updated in the repository."),(0,i.kt)("img",{alt:"image",src:"https://github.com/Capstone-Projects-2023-Fall/project-studysync/assets/123430237/efe8b42e-189e-4bfd-9c96-78aaa0d29c05"}))))),(0,i.kt)("h2",{id:"quizrepository-test-suite"},"QuizRepository Test Suite"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Test whether you can fetch all quizzes"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Test Case: Test whether you can fetch all quizzes.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Method: get_AllQuizzes()")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Expected Result: The repository should successfully fetch all quizzes.")))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Handles errors when fetching all quizzes"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Test Case: Handles errors when fetching all quizzes.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Method: get_AllQuizzes()")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Expected Result: The repository should handle errors gracefully when attempting to fetch all quizzes.")))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Tests the functionality of finding a quiz with a valid id"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Test Case: Tests the functionality of finding a quiz with a valid id.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Method: get_QuizById(validQuizId)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Expected Result: The repository should successfully find and return the quiz with the validQuizId.")))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Tests the failure case of finding a quiz with an invalid id"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Test Case: Tests the failure case of finding a quiz with an invalid id.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Method: get_QuizById(invalidQuizId)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Expected Result: The repository should handle the failure case gracefully and return an appropriate error or null when attempting to find a quiz with an invalid id."))))),(0,i.kt)("img",{alt:"image",src:"https://github.com/Capstone-Projects-2023-Fall/project-studysync/assets/123430237/0e25bd14-58d1-4352-8447-756aa494a808"}),(0,i.kt)("h2",{id:"flashcard-repository-test-suite"},"Flashcard Repository Test Suite"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Test the functionality of retrieving a flashcard set by id"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Test Case: Test the functionality of retrieving a flashcard set by id.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Method: getFlashcardSet(flashcardSetId)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Expected Result: The repository should successfully retrieve and return the flashcard set with the specified flashcardSetId.")))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"getAll_flashcardSet"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Test Case: Test the functionality of retrieving all flashcard sets from the database.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Method: getAll_flashcardSet()")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Expected Result: The repository should successfully retrieve and return all flashcard sets from the database.")))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"getFlashcardSetBy_Id"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Test Case: Test the functionality of retrieving a flashcard set by id.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Method: getFlashcardSetBy_Id(flashcardSetId)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Expected Result: The repository should successfully retrieve and return the flashcard set with the specified flashcardSetId.")))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"getFlashcards"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Test Case: Tests the functionality of retrieving flashcards given a list of ids.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Method: getFlashcards(flashcardIds)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Expected Result: The repository should successfully retrieve and return the flashcards corresponding to the list of flashcardIds."))))),(0,i.kt)("img",{alt:"image",src:"https://github.com/Capstone-Projects-2023-Fall/project-studysync/assets/123430237/e74c33b4-8579-41f6-920a-1816eff6c5d4"}),(0,i.kt)("h2",{id:"userrepository-test-suite"},"UserRepository Test Suite"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Get Item"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Test Case: Test get user flashcards")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Method: getUserFlashcards(userId)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Expected Result: The repository should successfully retrieve and return the flashcards associated with the specified userId.")))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Test get user quizzes"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Test Case: Test get user quizzes")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Method: getUserQuizzes(userId)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Expected Result: The repository should successfully retrieve and return the quizzes associated with the specified userId.")))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Test get user events"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Test Case: Test get user events")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Method: getUserEvents(userId)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Expected Result: The repository should successfully retrieve and return the events associated with the specified userId.")))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Test get user notifications"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Test Case: Test get user notifications")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Method: getUserNotifications(userId)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Expected Result: The repository should successfully retrieve and return the notifications associated with the specified userId.")))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Test get user upcoming events"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Test Case: Test get user upcoming events")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Method: getUserUpcomingEvents(userId)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Expected Result: The repository should successfully retrieve and return the upcoming events associated with the specified userId.")))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Getting Item by Id"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Test Case: Followers - Test Get followers by id")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Method: getFollowersById(userId)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Expected Result: The repository should successfully retrieve and return the followers of the user with the specified userId.")))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Test Get following by id"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Test Case: Following - Test Get following by id")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Method: getFollowingById(userId)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Expected Result: The repository should successfully retrieve and return the users followed by the user with the specified userId.")))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Test Get events by id"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Test Case: Events - Test Get events by id")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Method: getEventsById(userId)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Expected Result: The repository should successfully retrieve and return the events associated with the user with the specified userId.")))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Test Get notifications by id"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Test Case: Notifications - Test Get notifications by id")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Method: getNotificationsById(userId)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Expected Result: The repository should successfully retrieve and return the notifications associated with the user with the specified userId.")))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Test Get shared quizzes by id"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Test Case: Shared Quizzes - Test Get shared quizzes by id")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Method: getSharedQuizzesById(userId)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Expected Result: The repository should successfully retrieve and return the shared quizzes associated with the user with the specified userId.")))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Test Get owned quizzes by id"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Test Case: Owned Quizzes - Test Get owned quizzes by id")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Method: getOwnedQuizzesById(userId)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Expected Result: The repository should successfully retrieve and return the owned quizzes associated with the user with the specified userId.")))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Test Get upcoming events by id"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Test Case: Upcoming Events - Test Get upcoming events by id")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Method: getUpcomingEventsById(userId)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Expected Result: The repository should successfully retrieve and return the upcoming events associated with the user with the specified userId.")))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Adding Item by Add"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Test Case: Followers - Test Add followers by id")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Method: addFollowerById(userId, followerId)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Expected Result: The repository should successfully add the follower (followerId) to the user with the specified userId.")))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Following - Test Add following by id"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Test Case: Following - Test Add following by id")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Method: addFollowingById(userId, followingId)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Expected Result: The repository should successfully add the following (followingId) to the user with the specified userId.")))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Test Add events by id"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Test Case: Events - Test Add events by id")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Method: addEventById(userId, eventId)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Expected Result: The repository should successfully add the event (eventId) to the user with the specified userId.")))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Test Add notifications by id"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Test Case: Notifications - Test Add notifications by id")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Method: addNotificationById(userId, notificationId)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Expected Result: The repository should successfully add the notification (notificationId) to the user with the specified userId.")))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Test Add shared quizzes by id"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Test Case: Shared Quizzes - Test Add shared quizzes by id")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Method: addSharedQuizById(userId, quizId)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Expected Result: The repository should successfully add the shared quiz (quizId) to the user with the specified userId.")))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Test Add owned quizzes by id"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Test Case: Owned Quizzes - Test Add owned quizzes by id")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Method: addOwnedQuizById(userId, quizId)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Expected Result: The repository should successfully add the owned quiz (quizId) to the user with the specified userId.")))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Test Add upcoming events by id"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Test Case: Upcoming Events - Test Add upcoming events by id")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Method: addUpcomingEventById(userId, eventId)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Expected Result: The repository should successfully add the upcoming event (eventId) to the user with the specified userId.")))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Test should convert 24-hour time to 12-hour format"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Test Case: Test should convert 24-hour time to 12-hour format")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Method: convertTo12HourFormat(time)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Expected Result: The method should successfully convert the given 24-hour time to 12-hour format.")))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"test should return the short form of the day of the week"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Test Case: Test should return the short form of the day of the week")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Method: getShortDayOfWeek(dayOfWeek)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Expected Result: The method should successfully return the short form of the given day of the week.")))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Test should return the abbreviated month name"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Test Case: Test should return the abbreviated month name")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Method: getAbbreviatedMonthName(month)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Expected Result: The method should successfully return the abbreviated month name for the given month.")))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Test should return true for a future timestamp"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Test Case: Test should return true for a future timestamp")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Method: isFutureTimestamp(timestamp)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Expected Result: The method should return true if the timestamp is in the future.")))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Test should return false for a past timestamp"))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"- Test Case: Test should return false for a past timestamp\n\n- Method: isFutureTimestamp(timestamp)\n\n- Expected Result: The method should return false if the timestamp is in the past.\n")),(0,i.kt)("ol",{start:25},(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Test Remove follower by id"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Test Case: Follower - Test Remove follower by id")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Method: removeFollowerById(userId, followerId)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Expected Result: The repository should successfully remove the follower (followerId) from the user with the specified userId.")))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Test Remove following by id"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Test Case: Following - Test Remove following by id")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Method: removeFollowingById(userId, followingId)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Expected Result: The repository should successfully remove the following (followingId) from the user with the specified userId.")))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Test Remove notifications by id"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Test Case: Notifications - Test Remove notifications by id")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Method: removeNotificationById(userId, notificationId)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Expected Result: The repository should successfully remove the notification (notificationId) from the user with the specified userId.")))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Test Remove upcoming events by id"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Test Case: Upcoming Events - Test Remove upcoming events by id")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Method: removeUpcomingEventById(userId, eventId)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Expected Result: The repository should successfully remove the upcoming event (eventId) from the user with the specified userId."))))),(0,i.kt)("img",{alt:"image",src:"https://github.com/Capstone-Projects-2023-Fall/project-studysync/assets/123430237/bb2796c5-36d4-4d10-b97d-ffadf8f34cd0"}))}u.isMDXComponent=!0}}]);